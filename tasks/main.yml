---
- name: "Update the host"
  block:
    - name: "Update / clean and dist-upgrade the host"
      ansible.builtin.package:
        update_cache: true
        autoclean: yes
        autoremove: yes

    - name: "Check if reboot is required or not"
      register: reboot_required_file
      ansible.builtin.stat:
        path: /var/run/reboot_required

    - name: "Reboot the host if required"
      when: reboot_required_file.stat.exists
      ansible.builtin.reboot:
        msg: "(ANSIBLE): The host have to be rebooted."
        connect_timeout: 5
        reboot_timeout: 600
        pre_reboot_delay: 0
        post_reboot_delay: 30
        test_command: uptime

- name: "Install and remove packages"
  block:
    - name: "Install packages"
      when: prepare_host_packages_installed | default(false)
      register: output
      changed_when: output.changed != true
      ansible.builtin.package:
        name: "{{ prepare_host_packages_installed }}"

    - name: "Remove packages and config files"
      when: prepare_host_packages_removed | default(false)
      register: output
      changed_when: output.changed != true
      ansible.builtin.package:
        state: absent
        name: "{{ prepare_host_packages_removed }}"

- name: "Create Groups"
  when: prepare_host_users | default(false)
  loop: "{{ prepare_host_users }}"
  loop_control:
    loop_var: user
  ansible.builtin.group:
    name: "{{ user.group }}"
    state: present

- name: "Create Users"
  when: prepare_host_users | default(false)
  loop: "{{ prepare_host_users }}"
  loop_control:
    loop_var: user
  ansible.builtin.user:
    name: "{{ user.login }}"
    groups: "{{ user.group }}"
    state: present
    append: true

- name: "Import sudoers"
  when: prepare_host_users | default(false)
  ansible.builtin.template:
    src: "templates/sudoers.j2"
    dest: "/etc/sudoers"
    group: "root"
    owner: "root"
    mode: 0440

- name: "Handle system users"
  when: prepare_host_system_users | default(false)
  block:
    - name: "Create Groups"
      loop: "{{ prepare_host_system_users }}"
      loop_control:
        loop_var: user
      ansible.builtin.group:
        name: "{{ user.group }}"
        state: present

    - name: "Add system user"
      loop: "{{ prepare_host_system_users }}"
      loop_control:
        loop_var: user
      ansible.builtin.user:
        name: "{{ user.login }}"
        groups: "{{ user.group }}"
        state: present
        system: true
        create_home: false
        append: true
        shell: "/sbin/nologin"

- name: "Handle iptables rules"
  block:
    - name: "Install package: iptables-persistent"
      when: prepare_host_packages_installed | default(false)
      register: output
      changed_when: output.changed != true
      ansible.builtin.package:
        name: "iptables-persistent"

    - name: "Add a cron file under /etc/cron.d: save"
      ansible.builtin.cron:
        cron_file: "ansible_iptables_persistent"
        name: "Iptables SAVE"
        weekday: "*"
        minute: "*/5"
        hour: "*"
        user: "root"
        job: "$(/usr/sbin/iptables-save > /etc/iptables/rules.v4) > /dev/null 2>&1"
        state: present

    - name: "Add a cron file under /etc/cron.d: restore"
      ansible.builtin.cron:
        cron_file: "ansible_iptables_persistent"
        name: "Iptables RESTORE"
        special_time: "reboot"
        user: "root"
        job: "/usr/sbin/iptables-restore < /etc/iptables/rules.v4 > /dev/null 2>&1"
        state: present
